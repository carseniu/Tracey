#include "src/logic/filter/Filter.h"

#include "src/logic/filter/FilterNode.h"
#include "src/logic/filter/Postfix.h"

#include <QDebug>


//===================================================================================================================================================================================================//
// PUBLIC
//===================================================================================================================================================================================================//

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
Filter::Filter(QObject* parent) :
  QObject(parent),
  rootNode(nullptr)
{
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
Filter::~Filter()
{
  delete rootNode;
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
bool Filter::check(const QString& text)
{
  if (scannerResult.error != Scanner::NoError)
  {
    return false;
  }

  this->text = text;

  if (rootNode == nullptr)
  {
    return false;
  }

  return rootNode->evaluate();
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
bool Filter::create(const QString& expression, const QVector<int>& operatorPositions, SearchType searchType, bool matchCase, bool wholeWord)
{
  rootNode->deleteLater();
  rootNode = nullptr;

  Scanner scanner(expression, operatorPositions);
  scannerResult = scanner.scanTokens();

  if (scannerResult.error == Scanner::NoError)
  {
    Postfix postfix(scannerResult.tokens);

    rootNode = postfix.getFilterTree(searchType, matchCase, wholeWord, this);

    return hasRootNode();
  }
  else
  {
    emit errorFound(scannerResult.errorMessage, scannerResult.errorPosition);

    return false;
  }
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
Scanner::ScannerResult Filter::getScannerResult() const
{
  return scannerResult;
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
QString Filter::getText() const
{
  return text;
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
bool Filter::hasRootNode() const
{
  return rootNode != nullptr;
}
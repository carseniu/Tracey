#include "src/logic/filter/FilterData.h"

#include "src/logic/core/TraceData.h"
#include "src/logic/filter/Filter.h"
#include "src/logic/filter/FilterWorker.h"
#include "src/logic/source/SourceData.h"

#include <QDebug>
#include <QMutexLocker>


//===================================================================================================================================================================================================//
// PUBLIC
//===================================================================================================================================================================================================//

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
FilterData::FilterData(const QString& id, const QString& name, SourceData* sourceData) :
  TraceData(id, name, sourceData),
  sourceData(sourceData)
{
  filter = new Filter(this);
  connect(filter, &Filter::errorFound, this, &FilterData::filterErrorFound);
  connect(sourceData, &SourceData::stopped, this, &FilterData::onSourceStopped);
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
FilterData::~FilterData()
{
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void FilterData::applyFilter(const QString& expression, const QVector<int>& operatorPositions, SearchType searchType, bool matchCase, bool wholeWord, int extraLinesBefore, int extraLinesAfter)
{
  deleteAll();

  this->expression = expression;
  this->operatorPositions = operatorPositions;
  this->searchType = searchType;
  this->matchCase = matchCase;
  this->wholeWord = wholeWord;
  this->extraLinesBefore = extraLinesBefore;
  this->extraLinesAfter = extraLinesAfter;

  start();
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
bool FilterData::check(const QString& text)
{
  return filter->check(text);
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void FilterData::clear()
{
  QMutexLocker locker(&mutex);

  data.clear();
  data.squeeze();
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
qint64 FilterData::getData(int index) 
{
  int dataSize = getSize();

  if (dataSize == 0 || index >= dataSize)
  {
    return -1;
  }

  return data.at(index);
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
QString FilterData::getLine(int line)
{
  return sourceData->getLine(getData(line));
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
int FilterData::getLineNumber(int index)
{
  return index + 1;
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
QString FilterData::getLineNumber(int index, bool source)
{
  QString result = QString::number(index + 1);

  if (source)
  {
    result.append(" (").append(sourceData->getLineNumber(getData(index), false)).append(")");
  }

  return result;
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
QStringList FilterData::getLines(int start, int count)
{
  if (getSize() == 0)
  {
    return QStringList();
  }

  int end = start + count - 1;

  if (end > getSize() - 1)
  {
    end = getSize() - 1;
  }

  QVector<qint64> data;

  for (int i = start; i <= end; ++i)
  {
    data << this->data.at(i);
  }

  return sourceData->getLines(data);
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
QList<int> FilterData::getLinesForMark(int maxLines)
{
  QList<int> result;

  int end = maxLines;

  if (end > data.size())
  {
    end = data.size();
  }

  for (int i = 0; i < end; ++i)
  {
    result << data.at(i);
  }

  return result;
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
int FilterData::getSize()
{
  QMutexLocker locker(&mutex);

  return data.size();
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
QString FilterData::getTraceId() const
{
  return sourceData->getId();
}


//===================================================================================================================================================================================================//
// PROTECTED
//===================================================================================================================================================================================================//

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
bool FilterData::prepareWorker()
{
  if (filter->create(expression, operatorPositions, searchType, matchCase, wholeWord)) {
    FilterWorker* filterWorker = new FilterWorker(this, sourceData, extraLinesBefore, extraLinesAfter);
    connect(filterWorker, &FilterWorker::dataAvailable, this, &FilterData::addData, Qt::DirectConnection);
    connect(filterWorker, &FilterWorker::lastLineChangedAndNotAccepted, this, &FilterData::onLastLineChangedAndNotAccepted, Qt::DirectConnection);

    setTraceWorker(filterWorker);

    return true;
  }

  return false;
}


//=================================================================================================================6==================================================================================//
// PRIVATE SLOTS
//===================================================================================================================================================================================================//

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void FilterData::addData(const QVector<qint64>& data)
{
  QMutexLocker locker(&mutex);

  if (!this->data.isEmpty())
  {
    int start = data.indexOf(this->data.last());
    if (start == -1)
    {
      start = 0;
    }

    for (int i = start; i < data.size(); ++i)
    {
      this->data.append(data.at(i));
    }
  }
  else
  {
    this->data.append(data);
  }

  emit sizeChanged(this->data.size());
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void FilterData::onLastLineChangedAndNotAccepted(int line)
{
  QMutexLocker locker(&mutex);

  if (!data.isEmpty())
  {
    int removeIndex = data.lastIndexOf(line);
    data.remove(removeIndex, data.size() - removeIndex);
  }

  emit sizeChanged(this->data.size());
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void FilterData::onSourceStopped()
{
  stop(false);
}
#include "src/logic/core/TraceData.h"

#include "src/logic/core/MarkData.h"
#include "src/logic/core/TraceWorker.h"

#include <QDebug>
#include <QFile>
#include <QMutexLocker>
#include <QThread>
#include <QTimer>


//===================================================================================================================================================================================================//
// PUBLIC
//===================================================================================================================================================================================================//

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
TraceData::TraceData(const QString& id, const QString& name, QObject* parent) :
  QObject(parent),
  id(id),
  name(name),
  position(-1),
  traceWorker(nullptr),
  updateInterval(200),
  oldDataSize(0),
  oldLastLine("")
{  
  markData = new MarkData(this);
  connect(markData, &MarkData::marksChanged, this, &TraceData::marksChanged);

  updateTimer = new QTimer(this);
  connect(updateTimer, &QTimer::timeout, this, &TraceData::processUpdate);
  updateTimer->start(updateInterval);
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
TraceData::~TraceData()
{
  updateTimer->stop();

  stop(false);
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void TraceData::addMark(int index)
{
  markData->add(index);
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void TraceData::addMarks(const QList<int>& lines)
{
  markData->add(lines);
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void TraceData::deleteAll()
{
  QMutexLocker lock(&mutex);

  clear();
  oldDataSize = 0;

  markData->clear();

  emit sizeChanged(0);
  emit deleted();
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void TraceData::deleteMarks()
{
  markData->clear();
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
const QVector<Mark>& TraceData::getMarks() const
{
  return markData->getAll();
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
QString TraceData::getId() const
{
  return id;
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
QString TraceData::getName() const
{
  return name;
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
int TraceData::getNextMark(int index) const
{
  return markData->getNext(index);
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
int TraceData::getPosition() const
{
  return position;
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
int TraceData::getPreviousMark(int index) const
{
  return markData->getPrevious(index);
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
bool TraceData::markExists(int index) const
{
  return markData->contains(index);
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
bool TraceData::markExists(int startIndex, int endIndex) const
{
  return markData->contains(startIndex, endIndex);
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void TraceData::reset()
{
  deleteAll();

  if (traceWorker != nullptr)
  {
    traceWorker->setReset(true);
  }
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
bool TraceData::saveAs(const QString& filePath)
{
  bool result = true;
  QFile file(filePath);
  QTextStream out(&file);

  if (file.open(QFile::WriteOnly))
  {
    int startUpdate = 0;
    int countUpdate = 10000;

    int count = 0;

    while (startUpdate <= getSize())
    {
      QStringList lines = getLines(startUpdate, countUpdate);

      for (QString line : lines)
      {
        out << line << "\n";
      }

      count += lines.size();
      startUpdate += countUpdate;
    }

    file.close();
  }
  else
  {
    result = false;
  }

  return result;
}


//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void TraceData::setName(const QString& name)
{
  this->name = name;

  emit nameChanged(name);
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void TraceData::setPosition(int position)
{
  this->position = position;
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void TraceData::setTraceWorker(TraceWorker* traceWorker)
{
  this->traceWorker = traceWorker;
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void TraceData::start()
{
  stop(true);

  if (!prepareWorker())
  {
    return;
  }

  QThread* thread = new QThread;
  traceWorker->moveToThread(thread);

  connect(thread, &QThread::started, traceWorker, &TraceWorker::process);
  connect(thread, &QThread::finished, thread, &QThread::deleteLater);
  connect(traceWorker, &TraceWorker::finished, thread, &QThread::quit);
  connect(traceWorker, &TraceWorker::finished, this, &TraceData::deleteWorker);
  connect(traceWorker, &TraceWorker::contentProcessStarted, this, &TraceData::contentProcessStarted);
  connect(traceWorker, &TraceWorker::contentProcessFinished, this, &TraceData::contentProcessFinished);
  connect(traceWorker, &TraceWorker::stepReady, this, &TraceData::stepReady);

  thread->start();

  emit started(this);
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void TraceData::stop(bool clear)
{
  if (traceWorker != nullptr)
  {
    traceWorker->doStop();

    emit stopped(this);
  }

  if (clear)
  {
    deleteAll();
  }
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void TraceData::toggleMark(int index)
{
  markData->toggle(index);
}


//===================================================================================================================================================================================================//
// PRIVATE SLOTS
//===================================================================================================================================================================================================//

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void TraceData::deleteWorker()
{
  traceWorker->deleteLater();
  traceWorker = nullptr;

  oldDataSize = 0;

  processUpdate();
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void TraceData::processUpdate()
{
  bool update = false;

  if (getSize() > 0)
  {
    if (getSize() != oldDataSize)
    {
      update = true;
      oldDataSize = getSize();
    }
    else
    {
      QString lastLine = getLine(getSize() - 1);

      if (lastLine != oldLastLine)
      {
        update = true;
        oldLastLine = lastLine;
      }
    }
  }
  else if (oldDataSize > 0)
  {
    update = true;
    oldDataSize = 0;
  }

  if (update)
  {
    emit updated();
  }
}
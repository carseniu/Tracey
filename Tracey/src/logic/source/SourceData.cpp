#include "src/logic/source/SourceData.h"

#include "src/logic/source/SourceWorker.h"
#include "src/logic/source/SourceWorkerCut.h"
#include "src/logic/source/SourceWorkerWrap.h"

#include <QDebug>
#include <QFile>
#include <QMutexLocker>
#include <QThread>


//===================================================================================================================================================================================================//
// PUBLIC
//===================================================================================================================================================================================================//

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
SourceData::SourceData(const QString& id, const QString& name, QObject* parent) :
  TraceData(id, name, parent)
{
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
SourceData::~SourceData()
{
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void SourceData::clear()
{
  QMutexLocker locker(&mutex);

  data.clear();
  data.append("");
  currentLine = 0;

  emit sizeChanged(0);
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
qint64 SourceData::getFileSize() const
{
  qint64 fileSize = -1;

  QFile file(source);

  if (file.open(QFile::ReadOnly))
  {
    fileSize = file.size();

    file.close();
  }

  return fileSize;
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
QString SourceData::getLine(int line) 
{
  QMutexLocker locker(&mutex);

  if (line < 0 || line >= data.size())
  {
    return "";
  }

  return data.at(line);
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
qint64 SourceData::getLineEnd() const
{
  return lineEnd;
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
int SourceData::getLineNumber(int index)
{
  return lineStart + index + 1;
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
QString SourceData::getLineNumber(int index, bool source)
{
  return QString::number(lineStart + index + 1);
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
QStringList SourceData::getLines(int start, int count)
{
  QStringList result;

  if (getSize() == 0 || start > getSize() - 1)
  {
    return result;
  }

  QMutexLocker locker(&mutex);

  int end = start + count - 1;

  if (end > data.size() - 1)
  {
    end = data.size() - 1;
  }

  for (int i = start; i <= end; ++i)
  {
    result << data.at(i);
  }

  return result;
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
QStringList SourceData::getLines(const QVector<qint64> data) 
{
  QStringList result;

  if (getSize() == 0 || data.at(0) > getSize() - 1)
  {
    return result;
  }

  QMutexLocker locker(&mutex);

  for (const qint64& index : data)
  {
    result << this->data.at(index);
  }

  return result;
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
int SourceData::getLineSize() const
{
  return lineSize;
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
int SourceData::getLineStart() const
{
  return lineStart;
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
int SourceData::getMaxLineSize() const
{
  return maxLineSize;
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
int SourceData::getMinLineSize() const
{
  return minLineSize;
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
bool SourceData::getPreload() const
{
  return preload;
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
int SourceData::getPositionEnd() const
{
  return positionEnd;
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
int SourceData::getPositionStart() const
{
  return positionStart;
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
int SourceData::getSize()
{
  QMutexLocker locker(&mutex);

  if (data.size() == 1 && data.front().isEmpty())
  {
    return 0;
  }

  return data.size();
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
QString SourceData::getSource() const
{
  return source;
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void SourceData::open(const QString& source, bool preload, RangeType rangeType, qint64 openStart, qint64 openEnd, LineHandling lineHandling, int lineSize)
{
  this->source = source;
  this->preload = preload;
  this->rangeType = rangeType;
  this->lineHandling = lineHandling;
  this->lineSize = lineSize;

  switch (rangeType)
  {
  case FilePosition:
  case Tail:
    positionStart = openStart;
    positionEnd = openEnd;
    lineStart = 0;
    lineEnd = -1;
    break;

  case LineNumber:
    positionStart = 0;
    positionEnd = -1;
    lineStart = openStart == 0 ? 0 : openStart - 1;
    lineEnd = openEnd;
    break;
  }

  QFile file(source);

  if (preload && (rangeType == FilePosition || rangeType == Tail) && file.size() < positionStart)
  {
    emit endOfFileSmallerThanPositionStart();
    return;
  }

  if (!preload)
  {
    positionStart = file.size();
    positionEnd = -1;
    lineStart = 0;
    lineEnd = -1;
  }

  start();
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void SourceData::setSource(const QString& source)
{
  this->source = source;
}


//===================================================================================================================================================================================================//
// PROTECTED
//===================================================================================================================================================================================================//

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
bool SourceData::prepareWorker()
{
  switch (lineHandling)
  {
   case Cut:
     sourceWorker = new SourceWorkerCut(this);
     break;

   case Wrap:
     sourceWorker = new SourceWorkerWrap(this);
     break;
  }

  connect(sourceWorker, &SourceWorker::dataAvailable, this, &SourceData::addData);
  connect(sourceWorker, &SourceWorker::updatesProcessStarted, this, &SourceData::updatesProcessStarted);
  connect(sourceWorker, &SourceWorker::updatesProcessFinished, this, &SourceData::updatesProcessFinished);
  connect(sourceWorker, &SourceWorker::stopped, this, &SourceData::stopped);
  connect(sourceWorker, &SourceWorker::endOfFileSmallerThanPosition, this, &SourceData::endOfFileSmallerThanPosition);
  connect(sourceWorker, &SourceWorker::errorReadingFile, this, &SourceData::errorReadingFile);
  connect(sourceWorker, &SourceWorker::contentProcessFinished, this, &SourceData::onContentProcessFinished);

  setTraceWorker(sourceWorker);

  return true;
}


//===================================================================================================================================================================================================//
// PRIVATE SLOTS
//===================================================================================================================================================================================================//

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void SourceData::addData(const QStringList& newLines)
{
  QMutexLocker locker(&mutex);

  data.removeLast();

  data.append(newLines);
   
  emit sizeChanged(data.size());
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void SourceData::onContentProcessFinished()
{
  if (rangeType == LineNumber && lineStart > 0 && sourceWorker->getLineCount() < lineStart)
  {
    stop(true);

    emit notEnoughLines(lineStart, sourceWorker->getLineCount());
  }
}
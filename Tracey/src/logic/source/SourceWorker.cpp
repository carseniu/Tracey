#include "src/logic/source/SourceWorker.h"

#include "src/logic/source/SourceData.h"

#include <QDebug>
#include <QThread>


//===================================================================================================================================================================================================//
// PUBLIC
//===================================================================================================================================================================================================//

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
SourceWorker::SourceWorker(SourceData* sourceData) :
  TraceWorker(sourceData->getPreload()),
  sourceData(sourceData),
  position(sourceData->getPositionStart()),
  positionEnd(sourceData->getPositionEnd()),
  lineStart(sourceData->getLineStart()),
  lineEnd(sourceData->getLineEnd()),
  lineSize(sourceData->getLineSize())
{
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
int SourceWorker::getLineCount() const
{
  return lineCount;
}


//===================================================================================================================================================================================================//
// PROTECTED
//===================================================================================================================================================================================================//

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void SourceWorker::checkEndOfFile(qint64 position, qint64 fileSize)
{
  if (position > fileSize)
  {
    emit endOfFileSmallerThanPosition();

    doStop();
  }
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
int SourceWorker::getBatchSize() const
{
  return batchSize;
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
QString SourceWorker::getLineFromBuffer(TraceWorker::WorkType workType, char buffer[], qint64 filePosition)
{
  QString line = "";

  if (workType == TraceWorker::Content && positionEnd != -1 && filePosition >= positionEnd)
  {
    QByteArray byteArray(buffer);
    byteArray = byteArray.left(byteArray.size() - (filePosition - positionEnd) + 1);

    line = QString(byteArray);

    doStop();
    emit stopped(sourceData);
  }
  else
  {
    line = QString(buffer);
  }

  return line;
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
int SourceWorker::getLineSize() const
{
  return lineSize;
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
qint64 SourceWorker::getPosition() const
{
  return position;
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
SourceData* SourceWorker::getSourceData() const
{
  return sourceData;
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void SourceWorker::incLineCount()
{
  lineCount++;
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
bool SourceWorker::isLineEndReached() const
{
  if (lineEnd != -1 && lineCount > lineEnd)
  {
    return true;
  }

  return false;
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
bool SourceWorker::isLastLineInRange(TraceWorker::WorkType workType)
{
  if (workType == Content && lineCount == lineEnd)
  {
    return true;
  }

  return false;

}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
bool SourceWorker::isLineInRange(TraceWorker::WorkType workType)
{
  if ((workType == Content && lineCount >= lineStart && (lineEnd == -1 || lineCount <= lineEnd - 1)) || workType == Updates)
  {
    return true;
  }

  return false;
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void SourceWorker::setPosition(qint64 position)
{
  this->position = position;
}
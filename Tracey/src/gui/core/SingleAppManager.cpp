#include "SingleAppManager.h"

#include <QCoreApplication>
#include <QLocalSocket>


const QLatin1String SingleAppManager::ping = QLatin1String("HELLO");


//===================================================================================================================================================================================================//
// PUBLIC
//===================================================================================================================================================================================================//

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
SingleAppManager &SingleAppManager::instance()
{
  static SingleAppManager instance;
  return instance;
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
bool SingleAppManager::canRun()
{
  if (isAnotherAppRunning())
  {
    return false;
  }

  if (!createServer())
  {
    return false;
  }

  return true;
}


//===================================================================================================================================================================================================//
// PRIVATE
//===================================================================================================================================================================================================//

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
SingleAppManager::SingleAppManager(QObject* parent) : 
  QObject(parent),
  serverName(QCoreApplication::instance()->applicationName())
{
  connect(&server, &QLocalServer::newConnection, 
    [this]()
    {
      while (server.hasPendingConnections())
      {
        QLocalSocket* connection = server.nextPendingConnection();

        connect(connection, &QLocalSocket::readyRead,
          this, [this, connection]() { checkPing(connection); });
      }
    }
  );
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
bool SingleAppManager::isAnotherAppRunning()
{
  QLocalSocket testSocket;
  testSocket.connectToServer(serverName, QLocalSocket::WriteOnly);
  
  if (testSocket.waitForConnected())
  {
    testSocket.write(ping.data());
    testSocket.waitForBytesWritten();
    testSocket.disconnectFromServer();

    return true;
  }

  return false;
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
bool SingleAppManager::createServer()
{
  bool success = server.listen(serverName);

  if (!success && server.serverError() == QAbstractSocket::AddressInUseError)
  {
    QLocalServer::removeServer(serverName);
    success = server.listen(serverName);
  }

  return success;
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void SingleAppManager::checkPing(QLocalSocket* socket)
{
  QByteArray data = socket->readAll();

  if (data.startsWith(ping.data()))
  {
    emit anotherAppStarted();
  }

  socket->deleteLater();
}
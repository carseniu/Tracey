#include "src/gui/widgets/iconbutton/IconButton.h"

#include "src/Tracey.h"

#include <QDebug>
#include <QIcon>
#include <QMouseEvent>
#include <QStylePainter>

using namespace Tracey;


//===================================================================================================================================================================================================//
// PUBLIC
//===================================================================================================================================================================================================//

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
IconButton::IconButton(const QIcon& icon, QWidget* parent) :
  QPushButton(icon, "", parent),
  focus(false),
  state(Normal),
  stateBeforeDisable(Normal)
{
  setFixedSize(16, 16);
  setMouseTracking(true);
}


//===================================================================================================================================================================================================//
// PROTECTED
//===================================================================================================================================================================================================//

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void IconButton::changeEvent(QEvent * event)
{
  if (event->type() == QEvent::EnabledChange)
  {
    if (!isEnabled())
    {
      stateBeforeDisable = state;
    }
    else
    {
      state = stateBeforeDisable;
    }

    update();
  }
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void IconButton::enterEvent(QEnterEvent *event)
{
  if (isEnabled())
  {
    state = Hover;

    update();
  }
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void IconButton::leaveEvent(QEvent *event)
{
  state = Normal;

  update();
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void IconButton::mousePressEvent(QMouseEvent* event)
{
  if (event->button() == Qt::LeftButton)
  {
    if (!isCheckable())
    {
      state = Pressed;
    }

    update();
  }

  QPushButton::mousePressEvent(event);
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void IconButton::mouseReleaseEvent(QMouseEvent* event)
{
  if (!isCheckable())
  {
    state = Normal;

    update();
  }

  QPushButton::mouseReleaseEvent(event);
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void IconButton::paintEvent(QPaintEvent* event)
{
  QStylePainter painter(this);
  painter.setRenderHint(QPainter::Antialiasing);

  QRect rect(0, 0, width(), height());
 
  QString borderColor = "transparent";
  QString backgroundColor = "transparent";

  int lightness = 100;

  switch (state)
  {
  case Hover:
    lightness = 110;
    break;

  case Pressed:
    lightness = 120;
    break;
  }

  painter.setPen(borderColor);
  painter.setBrush(QBrush(QColor(backgroundColor)));
  painter.drawRect(0, 0, width(), height());

  QPixmap pixmap;

  if (isChecked())
  {
    pixmap = icon().pixmap(16, 16, QIcon::Normal, QIcon::On);
  }
  else
  {
    pixmap = icon().pixmap(16, 16, QIcon::Normal, QIcon::Off);
  }

  if (!isEnabled())
  {
    pixmap = setLightness(pixmap, 130);
    pixmap = setSaturation(pixmap, 0);
  }
  else
  {
    pixmap = setLightness(pixmap, lightness);
  }

  int iconWidth = pixmap.width();
  int iconHeight = pixmap.height();

  if (iconHeight > height())
  {
    iconHeight = height();

    pixmap = pixmap.scaled(QSize(iconWidth, iconHeight), Qt::KeepAspectRatio);

    iconWidth = pixmap.width();
  }

  painter.drawPixmap((width() - iconWidth) / 2, (height() - iconHeight) / 2, pixmap);
}
#include "src/gui/widgets/combobox/ComboBoxDelegate.h"

#include <QPainter>


//===================================================================================================================================================================================================//
// PUBLIC
//===================================================================================================================================================================================================//

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
ComboBoxDelegate::ComboBoxDelegate(QObject* parent) :
  QItemDelegate(parent),
  width(-1),
  height(20)
{
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void ComboBoxDelegate::setHeight(int height)
{
  this->height = height;
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void ComboBoxDelegate::setWidth(int width)
{
  this->width = width;
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
QSize ComboBoxDelegate::sizeHint(const QStyleOptionViewItem& option, const QModelIndex& index) const
{
  if (width == -1)
  {
    return QSize(option.rect.width(), height);
  }
  else
  {
    return QSize(width, height);
  }
}


//===================================================================================================================================================================================================//
// PROTECTED
//===================================================================================================================================================================================================//

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void ComboBoxDelegate::paint(QPainter* painter, const QStyleOptionViewItem& option, const QModelIndex& index) const
{
  QRect rect = option.rect;
  QRect bounds;

  QPoint startPoint(0, rect.top());
  QPoint stopPoint(0, rect.bottom());
  QLinearGradient gradient(startPoint, stopPoint);

  bounds = QRect(rect.left() + 1, rect.top() + 1, painter->window().width() - 3, rect.height() - 3);

  if (option.state & QStyle::State_Selected)
  {
    painter->setPen("#85acdd");
    painter->setBrush(QColor("#b7dbff"));
    painter->drawRect(bounds);
  }

  // Draw icon and text
  painter->setPen(Qt::black);
  QFontMetrics fontMetrics(option.font);
  QString text = fontMetrics.elidedText(index.data().toString(), Qt::ElideRight, rect.width() - 35);
    
  QIcon icon = qvariant_cast<QIcon>(index.data(Qt::DecorationRole));

  if (!icon.isNull())
  {
    int iconHeight = height - 4;
    painter->drawPixmap(QPoint(rect.left() + 3, rect.top() + (rect.height() - iconHeight) / 2), icon.pixmap(iconHeight, iconHeight));
    painter->drawText(QPoint(rect.left() + iconHeight + 5, rect.bottom() - (rect.height() - fontMetrics.height()) / 2 - 2), text);
  }
  else
  {
    painter->drawText(QPoint(rect.left() + 3, rect.bottom() - (rect.height() - fontMetrics.height()) / 2 - 2), text);
  }
}

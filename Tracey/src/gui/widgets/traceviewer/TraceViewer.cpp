#include "TraceViewer.h"

#include "src/logic/core/TraceData.h"
#include "src/gui/widgets/traceviewer/StatusBarInfo.h"
#include "src/gui/widgets/traceviewer/Viewport.h"

#include <QDebug>
#include <QGridLayout>
#include <QScrollBar>
#include <QStatusBar>


//===================================================================================================================================================================================================//
// PUBLIC
//===================================================================================================================================================================================================//

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
TraceViewer::TraceViewer(TraceData* traceData, QWidget* parent) :
  QFrame(parent),
  traceData(traceData),
  autoscroll(true),
  wheelScrollStep(3)
{
  viewport = new Viewport(traceData, this);
  viewport->setEnabled(false);

  horizontalScrollBar = new QScrollBar(Qt::Horizontal, this);
  horizontalScrollBar->setRange(0, 0);

  verticalScrollBar = new QScrollBar(Qt::Vertical, this);
  verticalScrollBar->setRange(0, 0);

  statusBarInfo = new StatusBarInfo(this);

  statusBar = new QStatusBar(this);
  statusBar->setSizeGripEnabled(false);
  statusBar->addPermanentWidget(statusBarInfo);

  QFrame* viewportFrame = new QFrame(this);
  viewportFrame->setObjectName("TraceViewerViewport");

  QHBoxLayout* viewportFrameLayout = new QHBoxLayout(viewportFrame);
  viewportFrameLayout->setMargin(0);
  viewportFrameLayout->setSpacing(0);
  viewportFrameLayout->addWidget(viewport);

  QGridLayout*  layout = new QGridLayout(this);
  layout->setMargin(0);
  layout->setSpacing(1);
  layout->addWidget(viewportFrame, 0, 0, 1, 1);
  layout->addWidget(verticalScrollBar, 0, 1, 1, 1);
  layout->addWidget(horizontalScrollBar, 1, 0, 1, 1);
  layout->addWidget(statusBar, 2, 0, 1, 2);


  connect(viewport, &Viewport::rowCountChanged, this, &TraceViewer::processRowCountChanged);
  connect(viewport, &Viewport::scrollDownRequested, this, &TraceViewer::scrollDown);
  connect(viewport, &Viewport::scrollUpRequested, this, &TraceViewer::scrollUp);
  connect(viewport, &Viewport::cursorChanged, statusBarInfo, &StatusBarInfo::setCursorInfo);
  connect(traceData, &TraceData::started, this, &TraceViewer::onStarted);
  connect(traceData, &TraceData::stopped, this, &TraceViewer::onStopped);
  connect(traceData, &TraceData::deleted, this, &TraceViewer::processDeleted);
  connect(traceData, &TraceData::updated, this, &TraceViewer::processUpdated);
  connect(traceData, &TraceData::sizeChanged, statusBarInfo, &StatusBarInfo::setLinesInfo);
  connect(traceData, &TraceData::marksChanged, viewport, &Viewport::onMarksChanged);
  connect(verticalScrollBar, &QScrollBar::valueChanged, this, &TraceViewer::update);
  connect(verticalScrollBar, &QScrollBar::sliderPressed, this, &TraceViewer::disableAutoscroll);
  connect(horizontalScrollBar, &QScrollBar::valueChanged, viewport, &Viewport::setHorizontalScrollBarValue);

  statusBarInfo->setAutoscroll(autoscroll);
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
TraceData* TraceViewer::getTraceData()
{
  return traceData;
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
int TraceViewer::getCursorColumn() const
{
  return viewport->getCursorColumn();
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
int TraceViewer::getCursorLine() const
{
  return viewport->getCursorLine();
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
int TraceViewer::getLineSize() const
{
  return viewport->getLineSize();
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void TraceViewer::goTo(int line, int column)
{
  disableAutoscroll();

  viewport->goTo(line, column);
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
bool TraceViewer::isAutoscroll() const
{
  return autoscroll;
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void TraceViewer::scroll(int lines)
{
  verticalScrollBar->setValue(verticalScrollBar->value() + lines);
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void TraceViewer::setAutoscroll(bool autoscroll)
{
  if (this->autoscroll != autoscroll)
  {
    this->autoscroll = autoscroll;

    statusBarInfo->setAutoscroll(autoscroll);

    emit autoscrollChanged(autoscroll);

    if (autoscroll)
    {
      verticalScrollBar->setValue(verticalScrollBar->maximum());
    }
  }
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void TraceViewer::setExtraContextMenuActions(const QList<QAction*>& actions)
{
  viewport->setExtraContextMenuActions(actions);
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void TraceViewer::setFont(const QFont& font)
{
  viewport->setViewportFont(font);
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void TraceViewer::setHorizontalScrollBar(int max, int pageStep)
{
  horizontalScrollBar->setMaximum(max);
  horizontalScrollBar->setPageStep(pageStep);
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void TraceViewer::setHorizontalScrollBarValue(int value)
{
  horizontalScrollBar->setValue(value);
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void TraceViewer::setVerticalScrollBarValue(int value)
{
  QObject::disconnect(verticalScrollBar, &QScrollBar::valueChanged, this, &TraceViewer::update);

  verticalScrollBar->setValue(value);

  connect(verticalScrollBar, &QScrollBar::valueChanged, this, &TraceViewer::update);
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void TraceViewer::showSourceLines(bool sourceLines)
{
  viewport->showSourceLines(sourceLines);
}


//===================================================================================================================================================================================================//
// PROTECTED
//===================================================================================================================================================================================================//

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void TraceViewer::resizeEvent(QResizeEvent* event)
{
  if (event->size().width() != event->oldSize().width())
  {
    viewport->updateHorizontalScrollBarMaximum();
  }
}


//===================================================================================================================================================================================================//
// PUBLIC SLOTS
//===================================================================================================================================================================================================//

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void TraceViewer::setHighlightingRules(const QVector<HighlightingRule*>& rules)
{
  viewport->setHighlightingRules(rules);
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void TraceViewer::showSearchResult(int line, int start, int end)
{
  disableAutoscroll();

  viewport->showSearchResult(line, start, end);
}


//===================================================================================================================================================================================================//
// PRIVATE SLOTS
//===================================================================================================================================================================================================//

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void TraceViewer::disableAutoscroll()
{
   autoscroll = false;

   statusBarInfo->setAutoscroll(autoscroll);

   emit autoscrollChanged(autoscroll);
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void TraceViewer::onStarted()
{
  statusBarInfo->setRunning(true);
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void TraceViewer::onStopped()
{
  statusBarInfo->setRunning(false);
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void TraceViewer::processRowCountChanged(int rowCount)
{
  if (traceData->getSize() == 0)
  {
    return;
  }

  int maximum = traceData->getSize() - rowCount;

  if (maximum < 0)
  {
    maximum = 0;
  }

  verticalScrollBar->setMaximum(maximum);
  verticalScrollBar->setPageStep(viewport->fontMetrics().height() * rowCount);

  int startLine = viewport->getStartLine();

  if (startLine + viewport->getRowCount() > traceData->getSize())
  {
    startLine = maximum;
  }

  update(startLine);
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void TraceViewer::processDeleted()
{
  viewport->reset();

  verticalScrollBar->setRange(0, 0);
  horizontalScrollBar->setRange(0, 0);
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void TraceViewer::processUpdated()
{
  int maximum = traceData->getSize() - viewport->getRowCount();
  int value = maximum;

  if (maximum < 0) {
    maximum = 0;
    value = 0;
  }
  verticalScrollBar->setMaximum(maximum);

  if (autoscroll)
  {
    int oldValue = verticalScrollBar->value();

    verticalScrollBar->setValue(value);

    if (oldValue == value)
    {
      update(value);
    }
  }
  else
  {
    update(verticalScrollBar->value());
  }
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void TraceViewer::scrollDown()
{
  verticalScrollBar->setValue(verticalScrollBar->value() + wheelScrollStep);
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void TraceViewer::scrollUp()
{
  verticalScrollBar->setValue(verticalScrollBar->value() - wheelScrollStep);
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------//
void TraceViewer::update(int startLine)
{
  viewport->update(startLine);
}